// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NameUpdated extends ethereum.Event {
  get params(): NameUpdated__Params {
    return new NameUpdated__Params(this);
  }
}

export class NameUpdated__Params {
  _event: NameUpdated;

  constructor(event: NameUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get previousName(): string {
    return this._event.parameters[1].value.toString();
  }

  get newName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NiftyDegen__getCharacterTraitsResult_characterTraitsStruct extends ethereum.Tuple {
  get tribe(): i32 {
    return this[0].toI32();
  }

  get skinColor(): i32 {
    return this[1].toI32();
  }

  get furColor(): i32 {
    return this[2].toI32();
  }

  get eyeColor(): i32 {
    return this[3].toI32();
  }

  get pupilColor(): i32 {
    return this[4].toI32();
  }

  get hair(): i32 {
    return this[5].toI32();
  }

  get mouth(): i32 {
    return this[6].toI32();
  }

  get beard(): i32 {
    return this[7].toI32();
  }

  get top(): i32 {
    return this[8].toI32();
  }

  get outerwear(): i32 {
    return this[9].toI32();
  }

  get print(): i32 {
    return this[10].toI32();
  }

  get bottom(): i32 {
    return this[11].toI32();
  }

  get footwear(): i32 {
    return this[12].toI32();
  }

  get belt(): i32 {
    return this[13].toI32();
  }

  get hat(): i32 {
    return this[14].toI32();
  }

  get eyewear(): i32 {
    return this[15].toI32();
  }

  get piercing(): i32 {
    return this[16].toI32();
  }

  get wrist(): i32 {
    return this[17].toI32();
  }

  get hands(): i32 {
    return this[18].toI32();
  }

  get neckwear(): i32 {
    return this[19].toI32();
  }

  get leftItem(): i32 {
    return this[20].toI32();
  }

  get rightItem(): i32 {
    return this[21].toI32();
  }
}

export class NiftyDegen extends ethereum.SmartContract {
  static bind(address: Address): NiftyDegen {
    return new NiftyDegen("NiftyDegen", address);
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME_CHANGE_PRICE(): BigInt {
    let result = super.call(
      "NAME_CHANGE_PRICE",
      "NAME_CHANGE_PRICE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_NAME_CHANGE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NAME_CHANGE_PRICE",
      "NAME_CHANGE_PRICE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPECIAL_CHARACTERS(): BigInt {
    let result = super.call(
      "SPECIAL_CHARACTERS",
      "SPECIAL_CHARACTERS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SPECIAL_CHARACTERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SPECIAL_CHARACTERS",
      "SPECIAL_CHARACTERS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeName(tokenId: BigInt, newName: string): string {
    let result = super.call(
      "changeName",
      "changeName(uint256,string):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(newName),
      ],
    );

    return result[0].toString();
  }

  try_changeName(
    tokenId: BigInt,
    newName: string,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "changeName",
      "changeName(uint256,string):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(newName),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCharacterTraits(
    tokenId: BigInt,
  ): NiftyDegen__getCharacterTraitsResult_characterTraitsStruct {
    let result = super.call(
      "getCharacterTraits",
      "getCharacterTraits(uint256):((uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return changetype<NiftyDegen__getCharacterTraitsResult_characterTraitsStruct>(
      result[0].toTuple(),
    );
  }

  try_getCharacterTraits(
    tokenId: BigInt,
  ): ethereum.CallResult<NiftyDegen__getCharacterTraitsResult_characterTraitsStruct> {
    let result = super.tryCall(
      "getCharacterTraits",
      "getCharacterTraits(uint256):((uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NiftyDegen__getCharacterTraitsResult_characterTraitsStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getNFTPrice(): BigInt {
    let result = super.call("getNFTPrice", "getNFTPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNFTPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNFTPrice", "getNFTPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getName(tokenId: BigInt): string {
    let result = super.call("getName", "getName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_getName(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRemovedTraits(): Array<i32> {
    let result = super.call(
      "getRemovedTraits",
      "getRemovedTraits():(uint16[])",
      [],
    );

    return result[0].toI32Array();
  }

  try_getRemovedTraits(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getRemovedTraits",
      "getRemovedTraits():(uint16[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAvailableAndAllowedTrait(tribe: BigInt, trait: BigInt): boolean {
    let result = super.call(
      "isAvailableAndAllowedTrait",
      "isAvailableAndAllowedTrait(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tribe),
        ethereum.Value.fromUnsignedBigInt(trait),
      ],
    );

    return result[0].toBoolean();
  }

  try_isAvailableAndAllowedTrait(
    tribe: BigInt,
    trait: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAvailableAndAllowedTrait",
      "isAvailableAndAllowedTrait(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tribe),
        ethereum.Value.fromUnsignedBigInt(trait),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAvailableTrait(trait: BigInt): boolean {
    let result = super.call(
      "isAvailableTrait",
      "isAvailableTrait(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(trait)],
    );

    return result[0].toBoolean();
  }

  try_isAvailableTrait(trait: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAvailableTrait",
      "isAvailableTrait(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(trait)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNameReserved(nameString: string): boolean {
    let result = super.call("isNameReserved", "isNameReserved(string):(bool)", [
      ethereum.Value.fromString(nameString),
    ]);

    return result[0].toBoolean();
  }

  try_isNameReserved(nameString: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNameReserved",
      "isNameReserved(string):(bool)",
      [ethereum.Value.fromString(nameString)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUnique(traitCombo: BigInt): boolean {
    let result = super.call("isUnique", "isUnique(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(traitCombo),
    ]);

    return result[0].toBoolean();
  }

  try_isUnique(traitCombo: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isUnique", "isUnique(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(traitCombo),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateName(newName: string): boolean {
    let result = super.call("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(newName),
    ]);

    return result[0].toBoolean();
  }

  try_validateName(newName: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(newName),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get nftlAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get storageAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeNameCall extends ethereum.Call {
  get inputs(): ChangeNameCall__Inputs {
    return new ChangeNameCall__Inputs(this);
  }

  get outputs(): ChangeNameCall__Outputs {
    return new ChangeNameCall__Outputs(this);
  }
}

export class ChangeNameCall__Inputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeNameCall__Outputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class InitPoolSizesCall extends ethereum.Call {
  get inputs(): InitPoolSizesCall__Inputs {
    return new InitPoolSizesCall__Inputs(this);
  }

  get outputs(): InitPoolSizesCall__Outputs {
    return new InitPoolSizesCall__Outputs(this);
  }
}

export class InitPoolSizesCall__Inputs {
  _call: InitPoolSizesCall;

  constructor(call: InitPoolSizesCall) {
    this._call = call;
  }
}

export class InitPoolSizesCall__Outputs {
  _call: InitPoolSizesCall;

  constructor(call: InitPoolSizesCall) {
    this._call = call;
  }
}

export class OverrideMintPriceCall extends ethereum.Call {
  get inputs(): OverrideMintPriceCall__Inputs {
    return new OverrideMintPriceCall__Inputs(this);
  }

  get outputs(): OverrideMintPriceCall__Outputs {
    return new OverrideMintPriceCall__Outputs(this);
  }
}

export class OverrideMintPriceCall__Inputs {
  _call: OverrideMintPriceCall;

  constructor(call: OverrideMintPriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OverrideMintPriceCall__Outputs {
  _call: OverrideMintPriceCall;

  constructor(call: OverrideMintPriceCall) {
    this._call = call;
  }
}

export class PauseMintingCall extends ethereum.Call {
  get inputs(): PauseMintingCall__Inputs {
    return new PauseMintingCall__Inputs(this);
  }

  get outputs(): PauseMintingCall__Outputs {
    return new PauseMintingCall__Outputs(this);
  }
}

export class PauseMintingCall__Inputs {
  _call: PauseMintingCall;

  constructor(call: PauseMintingCall) {
    this._call = call;
  }
}

export class PauseMintingCall__Outputs {
  _call: PauseMintingCall;

  constructor(call: PauseMintingCall) {
    this._call = call;
  }
}

export class PurchaseCall extends ethereum.Call {
  get inputs(): PurchaseCall__Inputs {
    return new PurchaseCall__Inputs(this);
  }

  get outputs(): PurchaseCall__Outputs {
    return new PurchaseCall__Outputs(this);
  }
}

export class PurchaseCall__Inputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }

  get character(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get head(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get clothing(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get accessories(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get items(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class PurchaseCall__Outputs {
  _call: PurchaseCall;

  constructor(call: PurchaseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseMintingCall extends ethereum.Call {
  get inputs(): UnpauseMintingCall__Inputs {
    return new UnpauseMintingCall__Inputs(this);
  }

  get outputs(): UnpauseMintingCall__Outputs {
    return new UnpauseMintingCall__Outputs(this);
  }
}

export class UnpauseMintingCall__Inputs {
  _call: UnpauseMintingCall;

  constructor(call: UnpauseMintingCall) {
    this._call = call;
  }
}

export class UnpauseMintingCall__Outputs {
  _call: UnpauseMintingCall;

  constructor(call: UnpauseMintingCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
